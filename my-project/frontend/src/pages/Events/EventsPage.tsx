import { useEffect, useState } from "react";
import styles from "./EventsPage.module.scss";
import { fetchEvents } from "@api/eventService";
import { getToken } from "@utils/localStorage";
import { useNavigate } from "react-router-dom";
import { useAppDispatch, useAppSelector } from "../../app/hooks";
import { fetchEventsThunk } from "../../features/events/eventsSlice";

interface Event {
  id: string;
  title: string;
  description: string;
  date: string;
  deletedAt?: string | null;
  imageUrl?: string | null;
  createdBy?: string;
}

const EventsPage = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const { events, isLoading, error, isDataInvalid } = useAppSelector((state) => state.events);
  const [showDeleted, setShowDeleted] = useState(false);

  useEffect(() => {
    dispatch(fetchEventsThunk(false));
  }, [dispatch]);

  if (isLoading) {
    return (
      <div className={styles.container}>
        <div className={styles.header}>
          <h2>–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</h2>
        </div>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...</div>
      </div>
    );
  }

  if (isDataInvalid) {
    return (
      <div className={styles.container}>
        <div className={styles.header}>
          <h2>–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
        </div>
        <div className={styles.error}>
          API –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h2>–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</h2>
      </div>

      {error && (
        <div className={styles.error}>
          <span>‚ö†Ô∏è</span> {error}
        </div>
      )}

      {Array.isArray(events) && events.length === 0 ? (
        <div className={styles.noEvents}>
          "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
        </div>
      ) : (
        <div className={styles.grid}>
          {Array.isArray(events) && events.map((event) => (
            <div
              key={event.id}
              className={`${styles.card} ${
                event.deletedAt ? styles.deleted : ""
              }`}
            >
              {event.imageUrl && (
                <img
                  src={event.imageUrl}
                  alt={event.title}
                  style={{
                    width: "100%",
                    borderRadius: "8px",
                    marginBottom: "12px",
                    objectFit: "cover",
                    maxHeight: "180px"
                  }}
                />
              )}
              <h3>{event.title}</h3>
              <p className={styles.description}>{event.description}</p>
              <div className={styles.date}>
                <span className={styles.icon}>üìÖ</span>
                {new Date(event.date).toLocaleString("ru-RU", {
                  day: "numeric",
                  month: "long",
                  year: "numeric",
                  hour: "2-digit",
                  minute: "2-digit",
                })}
                {event.deletedAt && (
                  <span className={styles.deletedLabel}>
                    —É–¥–∞–ª–µ–Ω–æ {new Date(event.deletedAt).toLocaleDateString()}
                  </span>
                )}
              </div>
              {event.createdBy && (
                <div className={styles.creator}>
                  <span className={styles.icon}>üë§</span>
                  –°–æ–∑–¥–∞—Ç–µ–ª—å: {event.createdBy}
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default EventsPage;
